type external boolean = "bool"

let external (btrue : boolean) = "true"
let external (bfalse : boolean) = "false"
let external (equal_int : int -> int -> boolean)= "fun x y -> x=y"
let external (plus : int -> int -> int) = "fun x y -> x+y"
let external (moins : int -> int -> int)= "fun x y -> x-y"
let external (andb : boolean -> boolean -> boolean) = "fun x y -> x&&y"
let external ['a] (if : boolean -> 'a -> 'a) = "fun x y z -> if x then y else z"

(*
class Eq 'a { equal : 'a -> 'a -> boolean}


class Eq 'a => Peano 'a {zero : 'a;
                succ : 'a -> 'a;
                pred : 'a -> 'a
               }

instance Eq int { equal = equal_int}
instance Peano int {zero = 0;
                    succ = fun x -> plus x 1;
                    pred = fun x -> if (equal x 0) 
                                       zero 
                                       (moins x 1)
                    }

let rec add = fun x -> fun y ->
 if (equal x zero) (y) (succ(add(pred x) y )) *)
