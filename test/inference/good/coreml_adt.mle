type 'a t_list = Nil | Cons of 'a * 'a t_list
type t_nat = Zero | Succ of t_nat
let rec
['a] (length : 'a t_list -> t_nat) =
  ['a]
  fun (l : 'a t_list) ->
    match l[] with Nil['a] -> Zero[] | Cons['a](_, xs) -> Succ[] (length['a] xs[])
let
(n : t_nat) =
  length[int] (Cons[int] (1, Cons[int] (2, Cons[int] (3, Nil[int]))))